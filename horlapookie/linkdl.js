
import axios from 'axios';
import fs from 'fs';

export const command = {
    name: 'linkdl',
    aliases: ['download', 'dl', 'socialdl'],
    description: 'Download videos from various social media platforms',
    usage: 'linkdl <social_media_url>',
    category: 'media',
    cooldown: 15,
    
    async execute(sock, msg, args, context) {
        const { from, settings } = context;
        
        if (!args.trim()) {
            await sock.sendMessage(from, {
                text: 'üì• **Universal Link Downloader**\n\nüîó **Supported platforms:**\n‚Ä¢ Instagram (posts, reels, stories)\n‚Ä¢ TikTok (videos, slideshows)\n‚Ä¢ Twitter/X (videos, images)\n‚Ä¢ Facebook (videos, posts)\n‚Ä¢ YouTube (shorts, videos)\n‚Ä¢ Snapchat (videos)\n\nüìù **Usage:** `.linkdl <url>`\n\n**Example:** `.linkdl https://instagram.com/p/xyz123`',
                contextInfo: {
                    externalAdReply: {
                        title: 'Universal Link Downloader',
                        body: 'Download from any social media',
                        thumbnailUrl: settings.profilePics[Math.floor(Math.random() * settings.profilePics.length)],
                        sourceUrl: 'https://github.com',
                        mediaType: 1
                    }
                }
            });
            return;
        }
        
        const url = args.trim();
        
        // Validate URL
        if (!url.includes('http://') && !url.includes('https://')) {
            await sock.sendMessage(from, {
                text: '‚ùå Please provide a valid URL starting with http:// or https://'
            });
            return;
        }
        
        try {
            const initialMsg = await sock.sendMessage(from, {
                text: 'üì• Analyzing link and preparing download...'
            });
            
            // Detect platform
            let platform = 'unknown';
            if (url.includes('instagram.com')) {
                platform = 'instagram';
            } else if (url.includes('tiktok.com')) {
                platform = 'tiktok';
            } else if (url.includes('twitter.com') || url.includes('x.com')) {
                platform = 'twitter';
            } else if (url.includes('facebook.com') || url.includes('fb.com')) {
                platform = 'facebook';
            } else if (url.includes('youtube.com') || url.includes('youtu.be')) {
                platform = 'youtube';
            } else if (url.includes('snapchat.com')) {
                platform = 'snapchat';
            }
            
            // For demonstration, we'll simulate the download process
            await sock.sendMessage(from, {
                text: `üì• **Link Download**\n\nüîç **Platform:** ${platform.charAt(0).toUpperCase() + platform.slice(1)}\nüìé **URL:** ${url}\n\n‚úÖ **Status:** Processing...\n\n‚ö†Ô∏è **Note:** This is a demonstration. Real implementation would require specific API endpoints or web scraping libraries for each platform.\n\nüí° **Recommended:** Use platform-specific commands like:\n‚Ä¢ .instagram <url>\n‚Ä¢ .tiktok <url>\n‚Ä¢ .twitter <url>`,
                contextInfo: {
                    externalAdReply: {
                        title: `${platform.charAt(0).toUpperCase() + platform.slice(1)} Download`,
                        body: 'Processing download request',
                        thumbnailUrl: settings.profilePics[Math.floor(Math.random() * settings.profilePics.length)],
                        sourceUrl: url,
                        mediaType: 1
                    }
                }
            });
            
        } catch (error) {
            console.error('Link download error:', error);
            await sock.sendMessage(from, {
                text: `‚ùå Download failed: ${error.message}\n\nüí° **Tips:**\n‚Ä¢ Make sure the URL is valid and accessible\n‚Ä¢ Try using platform-specific commands\n‚Ä¢ Some content may be private or restricted`
            });
        }
    }
};
