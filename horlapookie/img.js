import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export const command = {
    name: 'img',
    aliases: ['image', 'generate'],
    description: 'Generate image from text using AI',
    usage: 'img <description>',
    category: 'AI',
    
    async execute(sock, msg, args, context) {
        const { settings } = context;
        const sender = msg.key.remoteJid;
        
        if (!args.trim()) {
            await sock.sendMessage(sender, {
                text: 'üé® Please provide a description for the image!\n\nExample: .img a beautiful sunset over mountains',
                contextInfo: {
                    externalAdReply: {
                        title: 'AI Image Generator',
                        body: 'Text to Image',
                        thumbnailUrl: settings.profilePics[Math.floor(Math.random() * settings.profilePics.length)],
                        sourceUrl: 'https://github.com',
                        mediaType: 1,
                        renderLargerThumbnail: false
                    }
                }
            });
            return;
        }
        
        try {
            await sock.sendMessage(sender, {
                text: 'üé® Generating image... Please wait...',
                contextInfo: {
                    externalAdReply: {
                        title: 'AI Image Generator',
                        body: 'Processing request',
                        thumbnailUrl: settings.profilePics[Math.floor(Math.random() * settings.profilePics.length)],
                        sourceUrl: 'https://github.com',
                        mediaType: 1,
                        renderLargerThumbnail: false
                    }
                }
            });
            
            const ai = new GoogleGenerativeAI(settings.geminiApiKey);
            
            // Note: Image generation is not available in current Gemini API
            // Using a placeholder response
            await sock.sendMessage(sender, {
                text: "‚ùå Image generation is not available with the current Gemini API version. This feature is temporarily disabled.",
                quoted: msg
            });
            return;
            
            const candidates = response.response?.candidates;
            if (!candidates || candidates.length === 0) {
                throw new Error('No image generated');
            }
            
            const content = candidates[0].content;
            if (!content || !content.parts) {
                throw new Error('Invalid response format');
            }
            
            let imageGenerated = false;
            
            for (const part of content.parts) {
                if (part.inlineData && part.inlineData.data) {
                    const imageBuffer = Buffer.from(part.inlineData.data, 'base64');
                    
                    await sock.sendMessage(sender, {
                        image: imageBuffer,
                        caption: `üé® *AI Generated Image*\n\nüìù Prompt: ${args}\n\n‚ú® Generated by yourh√Øghness AI`,
                        contextInfo: {
                            externalAdReply: {
                                title: 'AI Image Generator',
                                body: 'Image generated successfully',
                                thumbnailUrl: settings.profilePics[Math.floor(Math.random() * settings.profilePics.length)],
                                sourceUrl: 'https://github.com',
                                mediaType: 1,
                                renderLargerThumbnail: false
                            }
                        }
                    });
                    
                    imageGenerated = true;
                    break;
                }
            }
            
            if (!imageGenerated) {
                throw new Error('No image data found in response');
            }
            
        } catch (error) {
            console.error('Image generation error:', error);
            await sock.sendMessage(sender, {
                text: '‚ùå Sorry, I encountered an error while generating the image. Please try again with a different prompt.',
                contextInfo: {
                    externalAdReply: {
                        title: 'Image Generation Error',
                        body: 'Generation failed',
                        thumbnailUrl: settings.profilePics[Math.floor(Math.random() * settings.profilePics.length)],
                        sourceUrl: 'https://github.com',
                        mediaType: 1,
                        renderLargerThumbnail: false
                    }
                }
            });
        }
    }
};
